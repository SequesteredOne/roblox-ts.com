"use strict";(self.webpackChunkroblox_ts=self.webpackChunkroblox_ts||[]).push([[231],{6374:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"api/functions","title":"Functions","description":"assert()","source":"@site/docs/api/functions.mdx","sourceDirName":"api","slug":"/api/functions","permalink":"/docs/api/functions","draft":false,"unlisted":false,"editUrl":"https://github.com/roblox-ts/roblox-ts.com/blob/master/docs/api/functions.mdx","tags":[],"version":"current","frontMatter":{"title":"Functions"},"sidebar":"docs","previous":{"title":"Constructors","permalink":"/docs/api/constructors"},"next":{"title":"Utility Types","permalink":"/docs/api/utility-types"}}');var i=t(4848),c=t(8453);const o={title:"Functions"},r=void 0,a={},l=[{value:"<code>assert()</code>",id:"assert",level:3},{value:"<code>typeOf()</code>",id:"typeof",level:3},{value:"<code>typeIs()</code>",id:"typeis",level:3},{value:"<code>classIs()</code>",id:"classis",level:3},{value:"<code>identity()</code>",id:"identity",level:3}];function d(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"assert",children:(0,i.jsx)(n.code,{children:"assert()"})}),"\n",(0,i.jsxs)(n.p,{children:["roblox-ts's assert uses \"JavaScript truthiness\" for it's condition. This means that ",(0,i.jsx)(n.code,{children:'""'})," (empty string), ",(0,i.jsx)(n.code,{children:"0"}),", and ",(0,i.jsx)(n.code,{children:"NaN"})," values will cause the assertion to fail in addition to ",(0,i.jsx)(n.code,{children:"undefined"})," and ",(0,i.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The reason for this is so that we can take advantage of TypeScript's ",(0,i.jsx)(n.code,{children:"asserts value"})," predicate feature."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'function foo(instance: Instance) {\n\tassert(instance.IsA("Part"));\n\tprint(instance.Size); // instance _must_ be a Part to reach this line\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Because of this change, ",(0,i.jsx)(n.code,{children:"assert(0)"})," or ",(0,i.jsx)(n.code,{children:'assert("")'})," will cause an error in roblox-ts, but not in Luau."]}),"\n",(0,i.jsx)(n.h3,{id:"typeof",children:(0,i.jsx)(n.code,{children:"typeOf()"})}),"\n",(0,i.jsxs)(n.p,{children:['Unfortunately, TypeScript already has an operator named "typeof" in the form of ',(0,i.jsx)(n.code,{children:"typeof x"}),". Because of this, we cannot expose the Luau ",(0,i.jsx)(n.code,{children:"typeof()"})," function directly. To get around this, we compile ",(0,i.jsx)(n.code,{children:"typeOf(value)"})," into ",(0,i.jsx)(n.code,{children:"typeof(value)"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"typeis",children:(0,i.jsx)(n.code,{children:"typeIs()"})}),"\n",(0,i.jsxs)(n.p,{children:["Checking types with ",(0,i.jsx)(n.code,{children:"typeOf"})," is usually not very useful with roblox-ts unless you need the string value that is returned. This is because TypeScript cannot infer that your if-statement confirmed the value was type checked:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'function foo(value: unknown) {\n    if (typeOf(value) === "Vector3") {\n        print(value.X); // error: value is still unknown!\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["To get around this, ",(0,i.jsx)(n.code,{children:'typeIs(value, "type")'})," compiles to ",(0,i.jsx)(n.code,{children:'typeof(value) == "type"'})," and helps TypeScript infer the value was type checked:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'function foo(value: unknown) {\n    if (typeIs(value, "Vector3")) {\n        print(value.X); // success!\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"classis",children:(0,i.jsx)(n.code,{children:"classIs()"})}),"\n",(0,i.jsxs)(n.p,{children:["Similar to ",(0,i.jsx)(n.code,{children:"typeIs"}),", ",(0,i.jsx)(n.code,{children:'classIs(value, "ClassName")'})," compiles to ",(0,i.jsx)(n.code,{children:'value.ClassName == "ClassName"'}),". This is useful for cases where you might want to avoid ",(0,i.jsx)(n.code,{children:"instance.IsA()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'function foo(value: Instance) {\n    // value.IsA("Script") would return true for LocalScripts!\n    if (classIs(value, "Script")) {\n        print(value.Name);\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"identity",children:(0,i.jsx)(n.code,{children:"identity()"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"identity"})," macro compiles to just the inner value you pass into it, allowing for a zero-cost type constraint abstraction. This is useful for verifying that a given value is the type you expect:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'interface MyInterface {\n\ta: number;\n\tb: string;\n\tc: boolean;\n}\n\nconst objects = {\n\tabc: identity<MyInterface>({\n\t\ta: 123,\n\t\tb: "abc",\n\t\tc: true,\n\t}),\n};\n'})})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6540);const i={},c=s.createContext(i);function o(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);